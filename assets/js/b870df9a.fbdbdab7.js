"use strict";(self.webpackChunkopenconnector_docs=self.webpackChunkopenconnector_docs||[]).push([[636],{5680:(e,n,t)=>{t.d(n,{xA:()=>u,yg:()=>d});var r=t(6540);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},p="mdxType",f={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},y=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=l(t),y=o,d=p["".concat(c,".").concat(y)]||p[y]||f[y]||a;return t?r.createElement(d,i(i({ref:n},u),{},{components:t})):r.createElement(d,i({ref:n},u))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=y;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[p]="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}y.displayName="MDXCreateElement"},7529:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>f,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var r=t(8168),o=(t(6540),t(5680));const a={},i="Synchronizations",s={unversionedId:"features/synchronysation",id:"features/synchronysation",title:"Synchronizations",description:"Synchronizations are processes that transfer data between different sources (from source A to source B). During this transfer, the data can be transformed and enriched through:",source:"@site/docs/features/synchronysation.md",sourceDirName:"features",slug:"/features/synchronysation",permalink:"/docs/features/synchronysation",draft:!1,editUrl:"https://github.com/conductionnl/openconnector/tree/main/website/docs/features/synchronysation.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Sources",permalink:"/docs/features/source"},next:{title:"OpenConnector Documentation",permalink:"/docs/intro"}},c={},l=[],u={toc:l},p="wrapper";function f(e){let{components:n,...t}=e;return(0,o.yg)(p,(0,r.A)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"synchronizations"},"Synchronizations"),(0,o.yg)("p",null,"Synchronizations are processes that transfer data between different sources (from source A to source B). During this transfer, the data can be transformed and enriched through:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Conditional logic and filtering"),(0,o.yg)("li",{parentName:"ul"},"Data mapping and transformations (mapping, flattening, etc.)"),(0,o.yg)("li",{parentName:"ul"},"Business rules and validations"),(0,o.yg)("li",{parentName:"ul"},"Additional actions and triggers")),(0,o.yg)("p",null,"This allows for flexible and powerful data integration scenarios while maintaining data consistency across systems."))}f.isMDXComponent=!0}}]);