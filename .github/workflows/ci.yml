name: CI - Tests & Quality Checks

on:
  pull_request:
    branches: [development, main, master]
  push:
    branches: [development, main, master]

jobs:
  tests:
    name: PHP ${{ matrix.php-version }} Tests with Nextcloud
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        php-version: ['8.2', '8.3']
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Load version configuration
        run: |
          echo "Loading centralized version configuration..."
          if [ -f .github/workflows/versions.env ]; then
            echo "✅ Found versions.env file"
            cat .github/workflows/versions.env
            # Export variables for use in subsequent steps
            echo "NEXTCLOUD_VERSION=31" >> $GITHUB_ENV
            echo "MARIADB_VERSION=10.6" >> $GITHUB_ENV
            echo "REDIS_VERSION=7" >> $GITHUB_ENV
            echo "MAILHOG_VERSION=latest" >> $GITHUB_ENV
            echo "NEXTCLOUD_IMAGE=nextcloud:31" >> $GITHUB_ENV
            echo "MARIADB_IMAGE=mariadb:10.6" >> $GITHUB_ENV
            echo "REDIS_IMAGE=redis:7" >> $GITHUB_ENV
            echo "MAILHOG_IMAGE=ghcr.io/juliusknorr/nextcloud-dev-mailhog:latest" >> $GITHUB_ENV
          else
            echo "⚠️ No versions.env found, using defaults"
            echo "NEXTCLOUD_VERSION=31" >> $GITHUB_ENV
            echo "MARIADB_VERSION=10.6" >> $GITHUB_ENV
            echo "REDIS_VERSION=7" >> $GITHUB_ENV
            echo "MAILHOG_VERSION=latest" >> $GITHUB_ENV
            echo "NEXTCLOUD_IMAGE=nextcloud:31" >> $GITHUB_ENV
            echo "MARIADB_IMAGE=mariadb:10.6" >> $GITHUB_ENV
            echo "REDIS_IMAGE=redis:7" >> $GITHUB_ENV
            echo "MAILHOG_IMAGE=ghcr.io/juliusknorr/nextcloud-dev-mailhog:latest" >> $GITHUB_ENV
          fi
        
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, dom, filter, gd, json, pdo, zip, curl, mysql
          tools: composer:v2
          
      - name: Get composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
        
      - name: Cache composer dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-
            
      - name: Install dependencies
        run: |
          # Update dependencies to ensure lock file is current
          composer update --no-interaction --prefer-dist
          
          # Verify PHPUnit is available
          if [ ! -f "./vendor/bin/phpunit" ]; then
            echo "PHPUnit not found, installing directly..."
            composer require --dev phpunit/phpunit:^9.6 --no-interaction
          fi
          
          # Verify PHPUnit works
          ./vendor/bin/phpunit --version
        
      - name: Start MariaDB, Redis, Mail and Nextcloud with Docker
        run: |
          # Start MariaDB container (matching local setup)
          docker run -d \
            --name mariadb-test \
            -e MYSQL_ROOT_PASSWORD=nextcloud \
            -e MYSQL_PASSWORD=nextcloud \
            -e MYSQL_USER=nextcloud \
            -e MYSQL_DATABASE=nextcloud \
            ${{ env.MARIADB_IMAGE }}
          
          # Start Redis container (required by Nextcloud)
          docker run -d \
            --name redis-test \
            ${{ env.REDIS_IMAGE }}
          
          # Start Mail container (MailHog for testing) - matching local setup
          docker run -d \
            --name mail-test \
            -p 1025:1025 \
            -p 8025:8025 \
            ${{ env.MAILHOG_IMAGE }}
          
          # Wait for MariaDB to be ready
          echo "Waiting for MariaDB to start..."
          timeout 60 bash -c 'until docker exec mariadb-test mysqladmin ping -h"localhost" --silent; do sleep 2; done'
          
          # Start Nextcloud container with all dependencies - matching local setup
          docker run -d \
            --name nextcloud-test \
            --link mariadb-test:db \
            --link redis-test:redis \
            --link mail-test:mail \
            -p 8080:80 \
            -e MYSQL_HOST=db \
            -e MYSQL_DATABASE=nextcloud \
            -e MYSQL_USER=nextcloud \
            -e MYSQL_PASSWORD=nextcloud \
            -e REDIS_HOST=redis \
            -e REDIS_PORT=6379 \
            -e MAIL_SMTP_HOST=mail \
            -e MAIL_SMTP_PORT=1025 \
            -e MAIL_SMTP_NAME=mail \
            -e MAIL_SMTP_PASSWORD= \
            -e MAIL_SMTP_SECURE= \
            -e MAIL_FROM_ADDRESS=nextcloud@localhost \
            -e MAIL_DOMAIN=localhost \
            -e NEXTCLOUD_ADMIN_USER=admin \
            -e NEXTCLOUD_ADMIN_PASSWORD=admin \
            -e NEXTCLOUD_TRUSTED_DOMAINS=localhost \
            -e WITH_REDIS=YES \
            ${{ env.NEXTCLOUD_IMAGE }}
          
          # Wait for Nextcloud to be fully ready (including database initialization)
          echo "Waiting for Nextcloud to be fully initialized..."
          timeout 600 bash -c 'until curl -sSf http://localhost:8080/status.php | grep -q "installed.*true"; do echo "Waiting for Nextcloud to start..."; sleep 10; done'
          echo "Nextcloud is fully initialized and ready!"
          
          # Create apps-extra directory in Nextcloud container
          echo "Creating apps-extra directory in Nextcloud container..."
          docker exec nextcloud-test mkdir -p /var/www/html/apps-extra
          
          # Copy the OpenConnector app into the container
          echo "Copying OpenConnector app into Nextcloud container..."
          docker cp . nextcloud-test:/var/www/html/apps-extra/openconnector
          
          # Wait a bit more for Nextcloud to fully process the app installation
          echo "Waiting for app installation to complete..."
          sleep 10
          
      - name: Diagnose Nextcloud occ command availability
        run: |
          echo "=== Nextcloud occ Command Diagnostics ==="
          echo "Checking if occ command is available..."
          
          # Check if occ file exists
          if ! docker exec nextcloud-test bash -c "test -f /var/www/html/occ"; then
            echo "❌ ERROR: occ file not found at /var/www/html/occ"
            echo "This indicates Nextcloud is not properly installed"
            exit 1
          fi
          echo "✅ occ file exists at /var/www/html/occ"
          
          # Check if occ is executable
          if ! docker exec nextcloud-test bash -c "test -x /var/www/html/occ"; then
            echo "❌ ERROR: occ file is not executable"
            echo "This indicates Nextcloud installation is incomplete"
            exit 1
          fi
          echo "✅ occ file is executable"
          
          # Test if occ command works
          if ! docker exec nextcloud-test bash -c "cd /var/www/html && php occ --version"; then
            echo "❌ ERROR: occ command failed to run"
            echo "This indicates Nextcloud is not fully initialized or has configuration issues"
            exit 1
          fi
          echo "✅ occ command is working"
          
          echo "Checking Nextcloud installation..."
          if ! docker exec nextcloud-test bash -c "ls -la /var/www/html/occ"; then
            echo "❌ ERROR: occ file not found at /var/www/html/occ"
            echo "This indicates Nextcloud is not properly installed"
            exit 1
          fi
          echo "✅ occ file found"
          
          echo "Checking if Nextcloud is fully initialized..."
          if ! docker exec nextcloud-test bash -c "php -r 'echo \"PHP is working\n\";'"; then
            echo "❌ ERROR: PHP is not working in the container"
            exit 1
          fi
          echo "✅ PHP is working"
          echo "=== End occ Command Diagnostics ==="
          
      - name: Install and enable OpenConnector app
        run: |
          echo "=== OpenConnector App Installation ==="
          echo "Checking Nextcloud version compatibility..."
          docker exec nextcloud-test bash -c "cd /var/www/html && php occ --version"
          
          # Check if app directory exists
          echo "Checking if OpenConnector app directory exists..."
          docker exec nextcloud-test bash -c "ls -la /var/www/html/apps-extra/openconnector/"
          
          # List available apps
          echo "Listing available apps..."
          docker exec nextcloud-test bash -c "cd /var/www/html && php occ app:list"
          
          echo "Installing OpenConnector app..."
          if ! docker exec nextcloud-test bash -c "cd /var/www/html && php occ app:install openconnector"; then
            echo "❌ ERROR: Failed to install OpenConnector app"
            echo "Checking if app is already installed..."
            docker exec nextcloud-test bash -c "cd /var/www/html && php occ app:list | grep openconnector"
            echo "Continuing with app enabling..."
          else
            echo "✅ OpenConnector app installed successfully"
          fi
          
          echo "Enabling OpenConnector app..."
          if ! docker exec nextcloud-test bash -c "cd /var/www/html && php occ app:enable openconnector"; then
            echo "❌ ERROR: Failed to enable OpenConnector app"
            echo "Checking app status..."
            docker exec nextcloud-test bash -c "cd /var/www/html && php occ app:list | grep openconnector"
            echo "Checking Nextcloud logs..."
            docker exec nextcloud-test bash -c "tail -20 /var/www/html/data/nextcloud.log"
            exit 1
          fi
          echo "✅ OpenConnector app enabled successfully"
          
          # Verify app is properly enabled
          echo "Verifying app installation..."
          docker exec nextcloud-test bash -c "cd /var/www/html && php occ app:list | grep openconnector"
          
          # Check if app classes are available (before dependencies)
          echo "Checking if app classes are available (before dependencies)..."
          echo "⚠️  NOTE: This is expected to fail before dependencies are installed"
          docker exec nextcloud-test bash -c "cd /var/www/html && php -r 'echo \"Testing class loading...\n\"; if (class_exists(\"OCA\\\\OpenConnector\\\\AppInfo\\\\Application\")) { echo \"✅ OpenConnector Application class found (unexpected but good!)\n\"; } else { echo \"⚠️  OpenConnector Application class not found (expected before dependencies)\n\"; }'"
          
          # Set up test environment
          docker exec nextcloud-test bash -c "cd /var/www/html && php occ config:system:set debug --value true"
          docker exec nextcloud-test bash -c "cd /var/www/html && php occ config:system:set loglevel --value 0"
          
          # Wait a bit more for Nextcloud to fully process the app installation
          echo "Waiting for app installation to complete..."
          sleep 10
          
      - name: Install Composer in Nextcloud container
        run: |
          echo "=== Installing Composer in Nextcloud Container ==="
          echo "Installing Composer..."
          docker exec nextcloud-test bash -c "curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer"
          echo "Verifying Composer installation..."
          if ! docker exec nextcloud-test bash -c "composer --version"; then
            echo "❌ ERROR: Composer installation failed"
            exit 1
          fi
          echo "✅ Composer installed successfully"
          
      - name: Install OpenConnector app dependencies
        run: |
          echo "=== Installing OpenConnector App Dependencies ==="
          echo "Installing app dependencies..."
          # Composer install is synchronous but may trigger autoloader regeneration
          docker exec nextcloud-test bash -c "cd /var/www/html/apps-extra/openconnector && composer install --no-dev --optimize-autoloader --ignore-platform-req=ext-soap --ignore-platform-req=ext-xsl"
          echo "✅ App dependencies installed successfully"
          
          # Restart Nextcloud to reload app classes
          echo "Restarting Nextcloud to reload app classes..."
          docker exec nextcloud-test bash -c "cd /var/www/html && php occ app:disable openconnector"
          docker exec nextcloud-test bash -c "cd /var/www/html && php occ app:enable openconnector"
          
          # Check app structure and files
          echo "Checking app structure and files..."
          docker exec nextcloud-test bash -c "ls -la /var/www/html/apps-extra/openconnector/"
          docker exec nextcloud-test bash -c "ls -la /var/www/html/apps-extra/openconnector/appinfo/"
          docker exec nextcloud-test bash -c "cat /var/www/html/apps-extra/openconnector/appinfo/info.xml | head -10"
          
          # Check if app is in the right location for Nextcloud
          echo "Checking if app should be in /var/www/html/apps/ instead..."
          docker exec nextcloud-test bash -c "ls -la /var/www/html/apps/ 2>/dev/null | grep openconnector || echo 'No openconnector found in /var/www/html/apps/'"
          
          # Move app to correct location for Nextcloud
          echo "Moving app to correct location for Nextcloud..."
          docker exec nextcloud-test bash -c "cp -r /var/www/html/apps-extra/openconnector /var/www/html/apps/"
          echo "App moved to /var/www/html/apps/openconnector"
          
          # Restart app in new location
          echo "Restarting app in new location..."
          docker exec nextcloud-test bash -c "cd /var/www/html && php occ app:disable openconnector"
          docker exec nextcloud-test bash -c "cd /var/www/html && php occ app:enable openconnector"
          
          # Force Nextcloud to rescan apps and clear caches
          echo "Forcing Nextcloud to rescan apps and clear caches..."
          docker exec nextcloud-test bash -c "cd /var/www/html && php occ app:list"
          docker exec nextcloud-test bash -c "cd /var/www/html && php occ maintenance:repair"
          docker exec nextcloud-test bash -c "cd /var/www/html && php occ app:list"
          
          # Check if app classes are available after dependencies
          echo "Checking if app classes are available (after dependencies)..."
          echo "🎯 This should now work after installing dependencies"
          
          # Pre-class loading diagnostics
          echo "=== Pre-Class Loading Diagnostics ==="
          echo "Checking app installation status..."
          docker exec nextcloud-test bash -c "cd /var/www/html && php occ app:list | grep openconnector || echo 'App not found in Nextcloud app list'"
          
          echo "Checking app file structure..."
          docker exec nextcloud-test bash -c "ls -la /var/www/html/apps/openconnector/ || echo 'App directory not found'"
          docker exec nextcloud-test bash -c "ls -la /var/www/html/apps/openconnector/lib/ || echo 'Lib directory not found'"
          docker exec nextcloud-test bash -c "ls -la /var/www/html/apps/openconnector/vendor/ || echo 'Vendor directory not found'"
          
          echo "Checking app info.xml..."
          docker exec nextcloud-test bash -c "cat /var/www/html/apps/openconnector/appinfo/info.xml | head -10"
          
          echo "Checking if Application.php exists..."
          docker exec nextcloud-test bash -c "ls -la /var/www/html/apps/openconnector/lib/AppInfo/Application.php || echo 'Application.php not found'"
          
          echo "Checking autoloader files..."
          docker exec nextcloud-test bash -c "ls -la /var/www/html/apps/openconnector/vendor/autoload.php || echo 'Vendor autoload.php not found'"
          docker exec nextcloud-test bash -c "ls -la /var/www/html/apps/openconnector/lib/autoload.php || echo 'App autoload.php not found'"
          
          # Generate missing app autoloader
          echo "Generating missing app autoloader..."
          # First, generate autoloader on host
          composer dump-autoload --optimize
          echo "✅ Host autoloader generated"
          
          # Verify autoloader was created on host
          if [ ! -f "lib/autoload.php" ]; then
            echo "❌ ERROR: lib/autoload.php not found on host after generation"
            echo "Checking what was generated..."
            ls -la lib/ || echo "lib directory not found"
            echo "Checking composer.json for autoload configuration..."
            cat composer.json | grep -A 10 -B 5 autoload || echo "No autoload section found"
            exit 1
          fi
          echo "✅ Host autoloader verified"
          
          # Copy the generated autoloader to container
          echo "Copying autoloader to container..."
          docker cp lib/autoload.php nextcloud-test:/var/www/html/apps/openconnector/lib/autoload.php
          echo "✅ Autoloader copied to container"
          
          # Restart Nextcloud to reload the new autoloader
          echo "Restarting Nextcloud to reload autoloader..."
          docker exec nextcloud-test bash -c "cd /var/www/html && php occ app:disable openconnector"
          docker exec nextcloud-test bash -c "cd /var/www/html && php occ app:enable openconnector"
          echo "✅ Nextcloud restarted with new autoloader"
          
          # Verify autoloader was created and clear cache
          echo "Verifying autoloader creation..."
          docker exec nextcloud-test bash -c "ls -la /var/www/html/apps/openconnector/lib/autoload.php || echo 'Autoloader still missing'"
          echo "Clearing Nextcloud cache..."
          docker exec nextcloud-test bash -c "cd /var/www/html && php occ maintenance:repair"
          echo "✅ Cache cleared after autoloader generation"
          
          # Wait for Nextcloud background processes to complete
          # maintenance:repair triggers background jobs (cache clearing, database migrations, etc.)
          # These processes need time to complete before classes become available
          echo "Waiting for Nextcloud background processes to complete..."
          
          # Try class loading with retry mechanism
          echo "Testing class loading with retry mechanism..."
          for i in {1..5}; do
            echo "Attempt $i/5:"
            if docker exec nextcloud-test bash -c "cd /var/www/html && php -r 'echo \"Testing class loading...\n\"; if (class_exists(\"OCA\\\\OpenConnector\\\\AppInfo\\\\Application\")) { echo \"✅ OpenConnector Application class found (SUCCESS!)\n\"; exit(0); } else { echo \"❌ OpenConnector Application class not found (attempt $i)\n\"; exit(1); }'"; then
              echo "✅ Class loading successful on attempt $i"
              break
            else
              if [ $i -lt 5 ]; then
                echo "⚠️ Attempt $i failed, waiting 10 seconds before retry..."
                sleep 10
              else
                echo "❌ All attempts failed - class loading unsuccessful"
                exit 1
              fi
            fi
          done
          
      - name: Enhanced class loading diagnostics
        run: |
          echo "=== Enhanced Class Loading Diagnostics ==="
          
          # Check if app is in both locations
          echo "Checking app locations..."
          docker exec nextcloud-test bash -c "echo 'Apps-extra location:'; ls -la /var/www/html/apps-extra/ | grep openconnector || echo 'Not found in apps-extra'"
          docker exec nextcloud-test bash -c "echo 'Apps location:'; ls -la /var/www/html/apps/ | grep openconnector || echo 'Not found in apps'"
          
          # Check if vendor directory exists in new location
          echo "Checking vendor directory in new location..."
          docker exec nextcloud-test bash -c "ls -la /var/www/html/apps/openconnector/vendor/ 2>/dev/null || echo 'No vendor directory in new location'"
          
          # Check if app is properly registered with Nextcloud
          echo "Checking if app is registered with Nextcloud..."
          docker exec nextcloud-test bash -c "cd /var/www/html && php occ app:list | grep openconnector || echo 'App not found in Nextcloud app list'"
          
          # Check app info and namespace
          echo "Checking app info and namespace..."
          docker exec nextcloud-test bash -c "cat /var/www/html/apps/openconnector/appinfo/info.xml | grep -E '(id|name)'"
          
          # Try to find the Application class file
          echo "Looking for Application class file..."
          docker exec nextcloud-test bash -c "find /var/www/html/apps/openconnector -name 'Application.php' -type f"
          
          # Check if autoloader is working
          echo "Testing autoloader..."
          docker exec nextcloud-test bash -c "cd /var/www/html && php -r 'echo \"Autoloader test...\n\"; if (class_exists(\"OCA\\\\OpenConnector\\\\AppInfo\\\\Application\")) { echo \"✅ OpenConnector Application class found (SUCCESS!)\n\"; } else { echo \"❌ OpenConnector Application class not found (this indicates a problem)\n\"; }'"
          
      - name: Diagnose Nextcloud container environment
        run: |
          echo "=== Nextcloud Container Environment Diagnostics ==="
          echo "Checking if composer is available..."
          if ! docker exec nextcloud-test bash -c "which composer"; then
            echo "❌ ERROR: Composer is not available in the container"
            exit 1
          fi
          echo "✅ Composer is available"
          
          echo "Checking if php is available..."
          if ! docker exec nextcloud-test bash -c "which php"; then
            echo "❌ ERROR: PHP is not available in the container"
            exit 1
          fi
          echo "✅ PHP is available"
          
          echo "Checking if composer.phar exists..."
          if ! docker exec nextcloud-test bash -c "ls -la /var/www/html/composer.phar"; then
            echo "⚠️  WARNING: composer.phar not found, but this may be normal"
          else
            echo "✅ composer.phar found"
          fi
          
          echo "Checking vendor directory..."
          if ! docker exec nextcloud-test bash -c "ls -la /var/www/html/vendor/"; then
            echo "⚠️  WARNING: vendor directory not found, but this may be normal"
          else
            echo "✅ vendor directory found"
          fi
          echo "=== End Environment Diagnostics ==="
          
      - name: Install PHPUnit in Nextcloud container
        run: |
          echo "=== PHPUnit Installation ==="
          echo "Attempting to install PHPUnit in Nextcloud container..."
          
          # Install PHPUnit with standard installation
          if ! docker exec nextcloud-test bash -c "cd /var/www/html && composer require --dev phpunit/phpunit:^9.6"; then
            echo "❌ ERROR: Failed to install PHPUnit in Nextcloud container"
            echo "This may be due to composer not being available or network issues"
            exit 1
          fi
          echo "✅ PHPUnit installed successfully"
          
          # Regenerate autoloader to fix class loading issues
          echo "Regenerating autoloader to fix class loading..."
          # Composer dump-autoload is synchronous but regenerates class maps
          docker exec nextcloud-test bash -c "cd /var/www/html && composer dump-autoload --optimize"
          
          # Check if phpunit executable exists
          echo "Checking PHPUnit executable location..."
          docker exec nextcloud-test bash -c "cd /var/www/html && find . -name phpunit -type f"
          
          echo "Verifying PHPUnit installation..."
          if ! docker exec nextcloud-test bash -c "cd /var/www/html && ./lib/composer/bin/phpunit --version"; then
            echo "❌ ERROR: PHPUnit installation verification failed"
            echo "Checking alternative locations..."
            docker exec nextcloud-test bash -c "cd /var/www/html && find . -name phpunit -type f -executable"
            echo "Trying to run PHPUnit with full path..."
            docker exec nextcloud-test bash -c "cd /var/www/html && php ./lib/composer/bin/phpunit --version"
            exit 1
          fi
          echo "✅ PHPUnit is working correctly"
          
      - name: Diagnose PHPUnit installation issues
        run: |
          echo "=== PHPUnit Installation Diagnostics ==="
          echo "Checking if vendor directory exists..."
          docker exec nextcloud-test bash -c "ls -la /var/www/html/vendor/ || echo 'vendor directory not found'"
          
          echo "Checking if vendor/bin directory exists..."
          docker exec nextcloud-test bash -c "ls -la /var/www/html/vendor/bin/ || echo 'vendor/bin directory not found'"
          
          echo "Checking what's in vendor/bin directory..."
          docker exec nextcloud-test bash -c "ls -la /var/www/html/vendor/bin/ | head -20 || echo 'Cannot list vendor/bin contents'"
          
          echo "Checking if phpunit executable exists..."
          docker exec nextcloud-test bash -c "ls -la /var/www/html/vendor/bin/phpunit || echo 'phpunit executable not found'"
          
          echo "Checking composer.json for phpunit dependency..."
          docker exec nextcloud-test bash -c "grep -i phpunit /var/www/html/composer.json || echo 'phpunit not found in composer.json'"
          
          echo "Checking composer.lock for phpunit..."
          docker exec nextcloud-test bash -c "grep -i phpunit /var/www/html/composer.lock || echo 'phpunit not found in composer.lock'"
          
          echo "Checking if we can run composer show phpunit..."
          docker exec nextcloud-test bash -c "cd /var/www/html && composer show phpunit/phpunit || echo 'phpunit not installed via composer'"
          
          echo "Checking current working directory in container..."
          docker exec nextcloud-test bash -c "pwd && ls -la"
          
          echo "Checking if we can find phpunit anywhere..."
          docker exec nextcloud-test bash -c "find /var/www/html -name phpunit -type f 2>/dev/null || echo 'phpunit not found anywhere'"
          
          echo "=== End PHPUnit Diagnostics ==="
          
      - name: Run PHP linting
        run: composer lint
        continue-on-error: true
        
      - name: Run unit tests inside Nextcloud container
        run: |
          # Run tests from inside the Nextcloud container where all OCP classes are available
          echo "Running tests inside Nextcloud container..."
          docker exec nextcloud-test bash -c "cd /var/www/html && ./lib/composer/bin/phpunit --bootstrap apps-extra/openconnector/tests/bootstrap.php apps-extra/openconnector/tests"
        
      - name: Upload coverage (PHP 8.2 only)
        if: matrix.php-version == '8.2'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          
      - name: Cleanup containers
        if: always()
        run: |
          docker stop nextcloud-test mariadb-test redis-test mail-test || true
          docker rm nextcloud-test mariadb-test redis-test mail-test || true

  quality:
    name: Code Quality & Standards with Nextcloud
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Load version configuration
        run: |
          echo "Loading centralized version configuration..."
          if [ -f .github/workflows/versions.env ]; then
            echo "✅ Found versions.env file"
            cat .github/workflows/versions.env
            # Export variables for use in subsequent steps
            echo "NEXTCLOUD_VERSION=31" >> $GITHUB_ENV
            echo "MARIADB_VERSION=10.6" >> $GITHUB_ENV
            echo "REDIS_VERSION=7" >> $GITHUB_ENV
            echo "MAILHOG_VERSION=latest" >> $GITHUB_ENV
            echo "NEXTCLOUD_IMAGE=nextcloud:31" >> $GITHUB_ENV
            echo "MARIADB_IMAGE=mariadb:10.6" >> $GITHUB_ENV
            echo "REDIS_IMAGE=redis:7" >> $GITHUB_ENV
            echo "MAILHOG_IMAGE=ghcr.io/juliusknorr/nextcloud-dev-mailhog:latest" >> $GITHUB_ENV
          else
            echo "⚠️ No versions.env found, using defaults"
            echo "NEXTCLOUD_VERSION=31" >> $GITHUB_ENV
            echo "MARIADB_VERSION=10.6" >> $GITHUB_ENV
            echo "REDIS_VERSION=7" >> $GITHUB_ENV
            echo "MAILHOG_VERSION=latest" >> $GITHUB_ENV
            echo "NEXTCLOUD_IMAGE=nextcloud:31" >> $GITHUB_ENV
            echo "MARIADB_IMAGE=mariadb:10.6" >> $GITHUB_ENV
            echo "REDIS_IMAGE=redis:7" >> $GITHUB_ENV
            echo "MAILHOG_IMAGE=ghcr.io/juliusknorr/nextcloud-dev-mailhog:latest" >> $GITHUB_ENV
          fi
        
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, dom, filter, gd, json, pdo, zip, curl, mysql
          tools: composer:v2
          
      - name: Get composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
        
      - name: Cache composer dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-
            
      - name: Start MariaDB, Redis, Mail and Nextcloud with Docker
        run: |
          # Start MariaDB container (matching local setup)
          docker run -d \
            --name mariadb-test-quality \
            -e MYSQL_ROOT_PASSWORD=nextcloud \
            -e MYSQL_PASSWORD=nextcloud \
            -e MYSQL_USER=nextcloud \
            -e MYSQL_DATABASE=nextcloud \
            ${{ env.MARIADB_IMAGE }}
          
          # Start Redis container (required by Nextcloud)
          docker run -d \
            --name redis-test-quality \
            ${{ env.REDIS_IMAGE }}
          
          # Start Mail container (MailHog for testing) - matching local setup
          docker run -d \
            --name mail-test-quality \
            -p 1026:1025 \
            -p 8026:8025 \
            ${{ env.MAILHOG_IMAGE }}
          
          # Wait for MariaDB to be ready
          echo "Waiting for MariaDB to start..."
          timeout 60 bash -c 'until docker exec mariadb-test-quality mysqladmin ping -h"localhost" --silent; do sleep 2; done'
          
          # Start Nextcloud container with all dependencies - matching local setup
          docker run -d \
            --name nextcloud-test-quality \
            --link mariadb-test-quality:db \
            --link redis-test-quality:redis \
            --link mail-test-quality:mail \
            -p 8081:80 \
            -e MYSQL_HOST=db \
            -e MYSQL_DATABASE=nextcloud \
            -e MYSQL_USER=nextcloud \
            -e MYSQL_PASSWORD=nextcloud \
            -e REDIS_HOST=redis \
            -e REDIS_PORT=6379 \
            -e MAIL_SMTP_HOST=mail \
            -e MAIL_SMTP_PORT=1025 \
            -e MAIL_SMTP_NAME=mail \
            -e MAIL_SMTP_PASSWORD= \
            -e MAIL_SMTP_SECURE= \
            -e MAIL_FROM_ADDRESS=nextcloud@localhost \
            -e MAIL_DOMAIN=localhost \
            -e NEXTCLOUD_ADMIN_USER=admin \
            -e NEXTCLOUD_ADMIN_PASSWORD=admin \
            -e NEXTCLOUD_TRUSTED_DOMAINS=localhost \
            -e WITH_REDIS=YES \
            ${{ env.NEXTCLOUD_IMAGE }}
          
          # Wait for Nextcloud to be fully ready (including database initialization)
          echo "Waiting for Nextcloud to be fully initialized..."
          timeout 600 bash -c 'until curl -sSf http://localhost:8081/status.php | grep -q "installed.*true"; do echo "Waiting for Nextcloud to start..."; sleep 10; done'
          echo "Nextcloud is fully initialized and ready!"
          
          # Create apps-extra directory in Nextcloud container
          echo "Creating apps-extra directory in Nextcloud container..."
          docker exec nextcloud-test-quality mkdir -p /var/www/html/apps-extra
          
          # Copy the OpenConnector app into the container
          echo "Copying OpenConnector app into Nextcloud container..."
          docker cp . nextcloud-test-quality:/var/www/html/apps-extra/openconnector
          
          # Wait a bit more for Nextcloud to fully process the app installation
          echo "Waiting for app installation to complete..."
          sleep 10
          
      - name: Install development dependencies in Nextcloud container
        run: |
          echo "Installing development dependencies in Nextcloud container..."
          
          # Install development tools in the container (Composer already installed)
          echo "Installing php-cs-fixer in Nextcloud container..."
          docker exec nextcloud-test-quality bash -c "cd /var/www/html && composer require --dev friendsofphp/php-cs-fixer:^3.0 --no-interaction"
          
          echo "Installing psalm in Nextcloud container..."
          docker exec nextcloud-test-quality bash -c "cd /var/www/html && composer require --dev vimeo/psalm:^5.0 --no-interaction"
          
          echo "✅ Development dependencies installed in Nextcloud container"
          
      - name: Diagnose Nextcloud occ command availability (Quality)
        run: |
          echo "=== Nextcloud occ Command Diagnostics (Quality) ==="
          echo "Checking if occ command is available..."
          
          # Check if occ file exists
          if ! docker exec nextcloud-test-quality bash -c "test -f /var/www/html/occ"; then
            echo "❌ ERROR: occ file not found at /var/www/html/occ"
            echo "This indicates Nextcloud is not properly installed"
            exit 1
          fi
          echo "✅ occ file exists at /var/www/html/occ"
          
          # Check if occ is executable
          if ! docker exec nextcloud-test-quality bash -c "test -x /var/www/html/occ"; then
            echo "❌ ERROR: occ file is not executable"
            echo "This indicates Nextcloud installation is incomplete"
            exit 1
          fi
          echo "✅ occ file is executable"
          
          # Test if occ command works
          if ! docker exec nextcloud-test-quality bash -c "cd /var/www/html && php occ --version"; then
            echo "❌ ERROR: occ command failed to run"
            echo "This indicates Nextcloud is not fully initialized or has configuration issues"
            exit 1
          fi
          echo "✅ occ command is working"
          
          echo "Checking Nextcloud installation..."
          if ! docker exec nextcloud-test-quality bash -c "ls -la /var/www/html/occ"; then
            echo "❌ ERROR: occ file not found at /var/www/html/occ"
            echo "This indicates Nextcloud is not properly installed"
            exit 1
          fi
          echo "✅ occ file found"
          
          echo "Checking if Nextcloud is fully initialized..."
          if ! docker exec nextcloud-test-quality bash -c "php -r 'echo \"PHP is working\n\";'"; then
            echo "❌ ERROR: PHP is not working in the container"
            exit 1
          fi
          echo "✅ PHP is working"
          echo "=== End occ Command Diagnostics (Quality) ==="
          
      - name: Install and enable OpenConnector app (Quality)
        run: |
          echo "=== OpenConnector App Installation (Quality) ==="
          echo "Checking Nextcloud version compatibility..."
          docker exec nextcloud-test-quality bash -c "cd /var/www/html && php occ --version"
          
          # Check if app directory exists
          echo "Checking if OpenConnector app directory exists..."
          docker exec nextcloud-test-quality bash -c "ls -la /var/www/html/apps-extra/openconnector/"
          
          # List available apps
          echo "Listing available apps..."
          docker exec nextcloud-test-quality bash -c "cd /var/www/html && php occ app:list"
          
          echo "Installing OpenConnector app..."
          if ! docker exec nextcloud-test-quality bash -c "cd /var/www/html && php occ app:install openconnector"; then
            echo "❌ ERROR: Failed to install OpenConnector app"
            echo "Checking if app is already installed..."
            docker exec nextcloud-test-quality bash -c "cd /var/www/html && php occ app:list | grep openconnector"
            echo "Continuing with app enabling..."
          else
            echo "✅ OpenConnector app installed successfully"
          fi
          
          echo "Enabling OpenConnector app..."
          if ! docker exec nextcloud-test-quality bash -c "cd /var/www/html && php occ app:enable openconnector"; then
            echo "❌ ERROR: Failed to enable OpenConnector app"
            echo "Checking app status..."
            docker exec nextcloud-test-quality bash -c "cd /var/www/html && php occ app:list | grep openconnector"
            echo "Checking Nextcloud logs..."
            docker exec nextcloud-test-quality bash -c "tail -20 /var/www/html/data/nextcloud.log"
            exit 1
          fi
          echo "✅ OpenConnector app enabled successfully"
          
          # Verify app is properly enabled
          echo "Verifying app installation..."
          docker exec nextcloud-test-quality bash -c "cd /var/www/html && php occ app:list | grep openconnector"
          
          # Check if app classes are available (before dependencies)
          echo "Checking if app classes are available (before dependencies)..."
          echo "⚠️  NOTE: This is expected to fail before dependencies are installed"
          docker exec nextcloud-test-quality bash -c "cd /var/www/html && php -r 'echo \"Testing class loading...\n\"; if (class_exists(\"OCA\\\\OpenConnector\\\\AppInfo\\\\Application\")) { echo \"✅ OpenConnector Application class found (unexpected but good!)\n\"; } else { echo \"⚠️  OpenConnector Application class not found (expected before dependencies)\n\"; }'"
          
          # Set up test environment
          docker exec nextcloud-test-quality bash -c "cd /var/www/html && php occ config:system:set debug --value true"
          docker exec nextcloud-test-quality bash -c "cd /var/www/html && php occ config:system:set loglevel --value 0"
          
          # Wait a bit more for Nextcloud to fully process the app installation
          echo "Waiting for app installation to complete..."
          sleep 10
          
      - name: Install Composer in Nextcloud container (Quality)
        run: |
          echo "=== Installing Composer in Nextcloud Container (Quality) ==="
          echo "Installing Composer..."
          docker exec nextcloud-test-quality bash -c "curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer"
          echo "Verifying Composer installation..."
          if ! docker exec nextcloud-test-quality bash -c "composer --version"; then
            echo "❌ ERROR: Composer installation failed"
            exit 1
          fi
          echo "✅ Composer installed successfully"
          
      - name: Install OpenConnector app dependencies (Quality)
        run: |
          echo "=== Installing OpenConnector App Dependencies (Quality) ==="
          echo "Installing app dependencies..."
          # Composer install is synchronous but may trigger autoloader regeneration
          docker exec nextcloud-test-quality bash -c "cd /var/www/html/apps-extra/openconnector && composer install --no-dev --optimize-autoloader --ignore-platform-req=ext-soap --ignore-platform-req=ext-xsl"
          echo "✅ App dependencies installed successfully"
          
          # Restart Nextcloud to reload app classes
          echo "Restarting Nextcloud to reload app classes..."
          docker exec nextcloud-test-quality bash -c "cd /var/www/html && php occ app:disable openconnector"
          docker exec nextcloud-test-quality bash -c "cd /var/www/html && php occ app:enable openconnector"
          
          # Check app structure and files
          echo "Checking app structure and files..."
          docker exec nextcloud-test-quality bash -c "ls -la /var/www/html/apps-extra/openconnector/"
          docker exec nextcloud-test-quality bash -c "ls -la /var/www/html/apps-extra/openconnector/appinfo/"
          docker exec nextcloud-test-quality bash -c "cat /var/www/html/apps-extra/openconnector/appinfo/info.xml | head -10"
          
          # Check if app is in the right location for Nextcloud
          echo "Checking if app should be in /var/www/html/apps/ instead..."
          docker exec nextcloud-test-quality bash -c "ls -la /var/www/html/apps/ 2>/dev/null | grep openconnector || echo 'No openconnector found in /var/www/html/apps/'"
          
          # Move app to correct location for Nextcloud
          echo "Moving app to correct location for Nextcloud..."
          docker exec nextcloud-test-quality bash -c "cp -r /var/www/html/apps-extra/openconnector /var/www/html/apps/"
          echo "App moved to /var/www/html/apps/openconnector"
          
          # Restart app in new location
          echo "Restarting app in new location..."
          docker exec nextcloud-test-quality bash -c "cd /var/www/html && php occ app:disable openconnector"
          docker exec nextcloud-test-quality bash -c "cd /var/www/html && php occ app:enable openconnector"
          
          # Force Nextcloud to rescan apps and clear caches
          echo "Forcing Nextcloud to rescan apps and clear caches..."
          docker exec nextcloud-test-quality bash -c "cd /var/www/html && php occ app:list"
          docker exec nextcloud-test-quality bash -c "cd /var/www/html && php occ maintenance:repair"
          docker exec nextcloud-test-quality bash -c "cd /var/www/html && php occ app:list"
          
          # Check if app classes are available after dependencies
          echo "Checking if app classes are available (after dependencies)..."
          echo "🎯 This should now work after installing dependencies"
          
          # Pre-class loading diagnostics
          echo "=== Pre-Class Loading Diagnostics (Quality) ==="
          echo "Checking app installation status..."
          docker exec nextcloud-test-quality bash -c "cd /var/www/html && php occ app:list | grep openconnector || echo 'App not found in Nextcloud app list'"
          
          echo "Checking app file structure..."
          docker exec nextcloud-test-quality bash -c "ls -la /var/www/html/apps/openconnector/ || echo 'App directory not found'"
          docker exec nextcloud-test-quality bash -c "ls -la /var/www/html/apps/openconnector/lib/ || echo 'Lib directory not found'"
          docker exec nextcloud-test-quality bash -c "ls -la /var/www/html/apps/openconnector/vendor/ || echo 'Vendor directory not found'"
          
          echo "Checking app info.xml..."
          docker exec nextcloud-test-quality bash -c "cat /var/www/html/apps/openconnector/appinfo/info.xml | head -10"
          
          echo "Checking if Application.php exists..."
          docker exec nextcloud-test-quality bash -c "ls -la /var/www/html/apps/openconnector/lib/AppInfo/Application.php || echo 'Application.php not found'"
          
          echo "Checking autoloader files..."
          docker exec nextcloud-test-quality bash -c "ls -la /var/www/html/apps/openconnector/vendor/autoload.php || echo 'Vendor autoload.php not found'"
          docker exec nextcloud-test-quality bash -c "ls -la /var/www/html/apps/openconnector/lib/autoload.php || echo 'App autoload.php not found'"
          
          # Generate missing app autoloader
          echo "Generating missing app autoloader..."
          # First, generate autoloader on host
          composer dump-autoload --optimize
          echo "✅ Host autoloader generated"
          
          # Verify autoloader was created on host
          if [ ! -f "lib/autoload.php" ]; then
            echo "❌ ERROR: lib/autoload.php not found on host after generation"
            echo "Checking what was generated..."
            ls -la lib/ || echo "lib directory not found"
            echo "Checking composer.json for autoload configuration..."
            cat composer.json | grep -A 10 -B 5 autoload || echo "No autoload section found"
            exit 1
          fi
          echo "✅ Host autoloader verified"
          
          # Copy the generated autoloader to container
          echo "Copying autoloader to container..."
          docker cp lib/autoload.php nextcloud-test-quality:/var/www/html/apps/openconnector/lib/autoload.php
          echo "✅ Autoloader copied to container"
          
          # Restart Nextcloud to reload the new autoloader
          echo "Restarting Nextcloud to reload autoloader..."
          docker exec nextcloud-test-quality bash -c "cd /var/www/html && php occ app:disable openconnector"
          docker exec nextcloud-test-quality bash -c "cd /var/www/html && php occ app:enable openconnector"
          echo "✅ Nextcloud restarted with new autoloader"
          
          # Verify autoloader was created and clear cache
          echo "Verifying autoloader creation..."
          docker exec nextcloud-test-quality bash -c "ls -la /var/www/html/apps/openconnector/lib/autoload.php || echo 'Autoloader still missing'"
          echo "Clearing Nextcloud cache..."
          docker exec nextcloud-test-quality bash -c "cd /var/www/html && php occ maintenance:repair"
          echo "✅ Cache cleared after autoloader generation"
          
          # Wait for Nextcloud background processes to complete
          # maintenance:repair triggers background jobs (cache clearing, database migrations, etc.)
          # These processes need time to complete before classes become available
          echo "Waiting for Nextcloud background processes to complete..."
          
          # Try class loading with retry mechanism
          echo "Testing class loading with retry mechanism..."
          for i in {1..5}; do
            echo "Attempt $i/5:"
            if docker exec nextcloud-test-quality bash -c "cd /var/www/html && php -r 'echo \"Testing class loading...\n\"; if (class_exists(\"OCA\\\\OpenConnector\\\\AppInfo\\\\Application\")) { echo \"✅ OpenConnector Application class found (SUCCESS!)\n\"; exit(0); } else { echo \"❌ OpenConnector Application class not found (attempt $i)\n\"; exit(1); }'"; then
              echo "✅ Class loading successful on attempt $i"
              break
            else
              if [ $i -lt 5 ]; then
                echo "⚠️ Attempt $i failed, waiting 10 seconds before retry..."
                sleep 10
              else
                echo "❌ All attempts failed - class loading unsuccessful"
                exit 1
              fi
            fi
          done
          
      - name: Enhanced class loading diagnostics (Quality)
        run: |
          echo "=== Enhanced Class Loading Diagnostics (Quality) ==="
          
          # Check if app is in both locations
          echo "Checking app locations..."
          docker exec nextcloud-test-quality bash -c "echo 'Apps-extra location:'; ls -la /var/www/html/apps-extra/ | grep openconnector || echo 'Not found in apps-extra'"
          docker exec nextcloud-test-quality bash -c "echo 'Apps location:'; ls -la /var/www/html/apps/ | grep openconnector || echo 'Not found in apps'"
          
          # Check if vendor directory exists in new location
          echo "Checking vendor directory in new location..."
          docker exec nextcloud-test-quality bash -c "ls -la /var/www/html/apps/openconnector/vendor/ 2>/dev/null || echo 'No vendor directory in new location'"
          
          # Check if app is properly registered with Nextcloud
          echo "Checking if app is registered with Nextcloud..."
          docker exec nextcloud-test-quality bash -c "cd /var/www/html && php occ app:list | grep openconnector || echo 'App not found in Nextcloud app list'"
          
          # Check app info and namespace
          echo "Checking app info and namespace..."
          docker exec nextcloud-test-quality bash -c "cat /var/www/html/apps/openconnector/appinfo/info.xml | grep -E '(id|name)'"
          
          # Try to find the Application class file
          echo "Looking for Application class file..."
          docker exec nextcloud-test-quality bash -c "find /var/www/html/apps/openconnector -name 'Application.php' -type f"
          
          # Check if autoloader is working
          echo "Testing autoloader..."
          docker exec nextcloud-test-quality bash -c "cd /var/www/html && php -r 'echo \"Autoloader test...\n\"; if (class_exists(\"OCA\\\\OpenConnector\\\\AppInfo\\\\Application\")) { echo \"✅ OpenConnector Application class found (SUCCESS!)\n\"; } else { echo \"❌ OpenConnector Application class not found (this indicates a problem)\n\"; }'"
          
      - name: Diagnose Nextcloud container environment (Quality)
        run: |
          echo "=== Nextcloud Container Environment Diagnostics (Quality) ==="
          echo "Checking if composer is available..."
          if ! docker exec nextcloud-test-quality bash -c "which composer"; then
            echo "❌ ERROR: Composer is not available in the container"
            exit 1
          fi
          echo "✅ Composer is available"
          
          echo "Checking if php is available..."
          if ! docker exec nextcloud-test-quality bash -c "which php"; then
            echo "❌ ERROR: PHP is not available in the container"
            exit 1
          fi
          echo "✅ PHP is available"
          
          echo "Checking if composer.phar exists..."
          if ! docker exec nextcloud-test-quality bash -c "ls -la /var/www/html/composer.phar"; then
            echo "⚠️  WARNING: composer.phar not found, but this may be normal"
          else
            echo "✅ composer.phar found"
          fi
          
          echo "Checking vendor directory..."
          if ! docker exec nextcloud-test-quality bash -c "ls -la /var/www/html/vendor/"; then
            echo "⚠️  WARNING: vendor directory not found, but this may be normal"
          else
            echo "✅ vendor directory found"
          fi
          echo "=== End Environment Diagnostics (Quality) ==="
          
      - name: Install PHPUnit in Nextcloud container (Quality)
        run: |
          echo "=== PHPUnit Installation (Quality) ==="
          echo "Attempting to install PHPUnit in Nextcloud container..."
          
          # Install PHPUnit with standard installation
          if ! docker exec nextcloud-test-quality bash -c "cd /var/www/html && composer require --dev phpunit/phpunit:^9.6"; then
            echo "❌ ERROR: Failed to install PHPUnit in Nextcloud container"
            echo "This may be due to composer not being available or network issues"
            exit 1
          fi
          echo "✅ PHPUnit installed successfully"
          
          # Regenerate autoloader to fix class loading issues
          echo "Regenerating autoloader to fix class loading..."
          # Composer dump-autoload is synchronous but regenerates class maps
          docker exec nextcloud-test-quality bash -c "cd /var/www/html && composer dump-autoload --optimize"
          
          # Check if phpunit executable exists
          echo "Checking PHPUnit executable location..."
          docker exec nextcloud-test-quality bash -c "cd /var/www/html && find . -name phpunit -type f"
          
          echo "Verifying PHPUnit installation..."
          if ! docker exec nextcloud-test-quality bash -c "cd /var/www/html && ./lib/composer/bin/phpunit --version"; then
            echo "❌ ERROR: PHPUnit installation verification failed"
            echo "Checking alternative locations..."
            docker exec nextcloud-test-quality bash -c "cd /var/www/html && find . -name phpunit -type f -executable"
            echo "Trying to run PHPUnit with full path..."
            docker exec nextcloud-test-quality bash -c "cd /var/www/html && php ./lib/composer/bin/phpunit --version"
            exit 1
          fi
          echo "✅ PHPUnit is working correctly"
          
      - name: Diagnose PHPUnit installation issues (Quality)
        run: |
          echo "=== PHPUnit Installation Diagnostics (Quality) ==="
          echo "Checking if vendor directory exists..."
          docker exec nextcloud-test-quality bash -c "ls -la /var/www/html/vendor/ || echo 'vendor directory not found'"
          
          echo "Checking if vendor/bin directory exists..."
          docker exec nextcloud-test-quality bash -c "ls -la /var/www/html/vendor/bin/ || echo 'vendor/bin directory not found'"
          
          echo "Checking what's in vendor/bin directory..."
          docker exec nextcloud-test-quality bash -c "ls -la /var/www/html/vendor/bin/ | head -20 || echo 'Cannot list vendor/bin contents'"
          
          echo "Checking if phpunit executable exists..."
          docker exec nextcloud-test-quality bash -c "ls -la /var/www/html/vendor/bin/phpunit || echo 'phpunit executable not found'"
          
          echo "Checking composer.json for phpunit dependency..."
          docker exec nextcloud-test-quality bash -c "grep -i phpunit /var/www/html/composer.json || echo 'phpunit not found in composer.json'"
          
          echo "Checking composer.lock for phpunit..."
          docker exec nextcloud-test-quality bash -c "grep -i phpunit /var/www/html/composer.lock || echo 'phpunit not found in composer.lock'"
          
          echo "Checking if we can run composer show phpunit..."
          docker exec nextcloud-test-quality bash -c "cd /var/www/html && composer show phpunit/phpunit || echo 'phpunit not installed via composer'"
          
          echo "Checking current working directory in container..."
          docker exec nextcloud-test-quality bash -c "pwd && ls -la"
          
          echo "Checking if we can find phpunit anywhere..."
          docker exec nextcloud-test-quality bash -c "find /var/www/html -name phpunit -type f 2>/dev/null || echo 'phpunit not found anywhere'"
          
          echo "=== End PHPUnit Diagnostics (Quality) ==="
          
      - name: Run PHP linting
        run: |
          echo "Running PHP linting in Nextcloud container..."
          docker exec nextcloud-test-quality bash -c "cd /var/www/html && find . -name '*.php' -exec php -l {} \;"
        continue-on-error: true
        
      - name: Run PHP CodeSniffer
        run: |
          echo "Running PHP CodeSniffer in Nextcloud container..."
          docker exec nextcloud-test-quality bash -c "cd /var/www/html && ./vendor/bin/php-cs-fixer fix --dry-run --diff"
        continue-on-error: true
        
      - name: Run Psalm static analysis
        run: |
          echo "Running Psalm static analysis in Nextcloud container..."
          docker exec nextcloud-test-quality bash -c "cd /var/www/html && ./vendor/bin/psalm --threads=1 --no-cache"
        continue-on-error: true
        
      - name: Run unit tests inside Nextcloud container
        run: |
          # Run tests from inside the Nextcloud container where all OCP classes are available
          echo "Running tests inside Nextcloud container..."
          docker exec nextcloud-test-quality bash -c "cd /var/www/html && ./lib/composer/bin/phpunit --bootstrap apps-extra/openconnector/tests/bootstrap.php apps-extra/openconnector/tests"
        
      - name: Generate quality status
        if: always()
        run: |
          echo "## 🔍 Code Quality & Standards" >> $GITHUB_STEP_SUMMARY
          if [ "${{ job.status }}" = "success" ]; then
            echo "- ✅ PHP Linting: Completed" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Code Style: Completed" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Static Analysis: Completed" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Unit Tests: Completed" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ All quality checks passed!" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ PHP Linting: Failed" >> $GITHUB_STEP_SUMMARY
            echo "- ❌ Code Style: Failed" >> $GITHUB_STEP_SUMMARY
            echo "- ❌ Static Analysis: Failed" >> $GITHUB_STEP_SUMMARY
            echo "- ❌ Unit Tests: Failed" >> $GITHUB_STEP_SUMMARY
            echo "- ❌ Some quality checks failed!" >> $GITHUB_STEP_SUMMARY
          fi
          
      - name: Cleanup containers
        if: always()
        run: |
          docker stop nextcloud-test-quality mariadb-test-quality redis-test-quality mail-test-quality || true
          docker rm nextcloud-test-quality mariadb-test-quality redis-test-quality mail-test-quality || true
