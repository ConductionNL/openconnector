name: CI - Tests & Quality Checks

on:
  pull_request:
    branches: [development, main, master]
  push:
    branches: [development, main, master]

jobs:
  tests:
    name: PHP ${{ matrix.php-version }} Tests with Nextcloud
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        php-version: ['8.2', '8.3']
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, dom, filter, gd, json, pdo, zip, curl, mysql
          tools: composer:v2
          
      - name: Get composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
        
      - name: Cache composer dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-
            
      - name: Install dependencies
        run: |
          # Update dependencies to ensure lock file is current
          composer update --no-interaction --prefer-dist
          
          # Verify PHPUnit is available
          if [ ! -f "./vendor/bin/phpunit" ]; then
            echo "PHPUnit not found, installing directly..."
            composer require --dev phpunit/phpunit:^9.6 --no-interaction
          fi
          
          # Verify PHPUnit works
          ./vendor/bin/phpunit --version

      - name: Start MariaDB, Redis, Mail and Nextcloud with Docker
        run: |
          # Start MariaDB container (matching local setup)
          docker run -d \
            --name mariadb-test \
            -e MYSQL_ROOT_PASSWORD=nextcloud \
            -e MYSQL_PASSWORD=nextcloud \
            -e MYSQL_USER=nextcloud \
            -e MYSQL_DATABASE=nextcloud \
            mariadb:10.6
          
          # Start Redis container (required by Nextcloud)
          docker run -d \
            --name redis-test \
            redis:7
          
          # Start Mail container (MailHog for testing) - matching local setup
          docker run -d \
            --name mail-test \
            -p 1025:1025 \
            -p 8025:8025 \
            ghcr.io/juliusknorr/nextcloud-dev-mailhog:latest
          
          # Wait for MariaDB to be ready
          echo "Waiting for MariaDB to start..."
          timeout 60 bash -c 'until docker exec mariadb-test mysqladmin ping -h"localhost" --silent; do sleep 2; done'
          
          # Start Nextcloud container with all dependencies - matching local setup
          docker run -d \
            --name nextcloud-test \
            --link mariadb-test:db \
            --link redis-test:redis \
            --link mail-test:mail \
            -p 8080:80 \
            -e MYSQL_HOST=db \
            -e MYSQL_DATABASE=nextcloud \
            -e MYSQL_USER=nextcloud \
            -e MYSQL_PASSWORD=nextcloud \
            -e REDIS_HOST=redis \
            -e REDIS_PORT=6379 \
            -e MAIL_SMTP_HOST=mail \
            -e MAIL_SMTP_PORT=1025 \
            -e MAIL_SMTP_NAME=mail \
            -e MAIL_SMTP_PASSWORD= \
            -e MAIL_SMTP_SECURE= \
            -e MAIL_FROM_ADDRESS=nextcloud@localhost \
            -e MAIL_DOMAIN=localhost \
            -e NEXTCLOUD_ADMIN_USER=admin \
            -e NEXTCLOUD_ADMIN_PASSWORD=admin \
            -e NEXTCLOUD_TRUSTED_DOMAINS=localhost \
            -e WITH_REDIS=YES \
            ghcr.io/juliusknorr/nextcloud-dev-php81:latest
          
          # Wait for Nextcloud to be ready
          echo "Waiting for Nextcloud to start..."
          timeout 300 bash -c 'until curl -f http://localhost:8080/status.php; do sleep 5; done'
          
          # Create apps-extra directory in Nextcloud container
          echo "Creating apps-extra directory in Nextcloud container..."
          docker exec nextcloud-test mkdir -p /var/www/html/apps-extra
          
          # Copy the OpenConnector app into the container
          echo "Copying OpenConnector app into Nextcloud container..."
          docker cp . nextcloud-test:/var/www/html/apps-extra/openconnector
          
          # Check what's available in the container
          echo "=== Nextcloud Container Diagnostics ==="
          echo "Checking if occ command is available..."
          docker exec nextcloud-test bash -c "which occ || echo 'occ not found'"
          echo "Checking if php occ works..."
          docker exec nextcloud-test bash -c "php occ --version || echo 'php occ not working'"
          echo "Checking Nextcloud installation..."
          docker exec nextcloud-test bash -c "ls -la /var/www/html/occ || echo 'occ file not found'"
          echo "Checking if Nextcloud is fully initialized..."
          docker exec nextcloud-test bash -c "php -r 'echo \"PHP is working\n\";'"
          echo "=== End Diagnostics ==="
          
          # Install the OpenConnector app
          echo "Installing OpenConnector app..."
          docker exec nextcloud-test bash -c "cd /var/www/html && php occ app:install openconnector" || echo "App installation failed, continuing..."
          
          # Enable the app
          echo "Enabling OpenConnector app..."
          docker exec nextcloud-test bash -c "cd /var/www/html && php occ app:enable openconnector" || echo "App enabling failed, continuing..."
          
          # Set up test environment
          docker exec nextcloud-test php occ config:system:set debug --value true
          docker exec nextcloud-test php occ config:system:set loglevel --value 0
          
          # Check what's available in the container
          echo "=== Container Diagnostics ==="
          echo "Checking if composer is available..."
          docker exec nextcloud-test bash -c "which composer || echo 'composer not found'"
          echo "Checking if php is available..."
          docker exec nextcloud-test bash -c "which php || echo 'php not found'"
          echo "Checking if composer.phar exists..."
          docker exec nextcloud-test bash -c "ls -la /var/www/html/composer.phar || echo 'composer.phar not found'"
          echo "Checking vendor directory..."
          docker exec nextcloud-test bash -c "ls -la /var/www/html/vendor/ || echo 'vendor directory not found'"
          echo "=== End Diagnostics ==="
          
          # Try to install PHPUnit
          echo "Attempting to install PHPUnit..."
          docker exec nextcloud-test bash -c "cd /var/www/html && composer require --dev phpunit/phpunit:^9.6" || echo "PHPUnit installation failed"
          
      - name: Run PHP linting
        run: composer lint
        continue-on-error: true
        
      - name: Run unit tests inside Nextcloud container
        run: |
          # Run tests from inside the Nextcloud container where all OCP classes are available
          echo "Running tests inside Nextcloud container..."
          docker exec nextcloud-test bash -c "cd /var/www/html && ./vendor/bin/phpunit --bootstrap apps-extra/openconnector/tests/bootstrap.php apps-extra/openconnector/tests"
        
      - name: Upload coverage (PHP 8.2 only)
        if: matrix.php-version == '8.2'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          
      - name: Cleanup containers
        if: always()
        run: |
          docker stop nextcloud-test mariadb-test redis-test mail-test || true
          docker rm nextcloud-test mariadb-test redis-test mail-test || true

  quality:
    name: Code Quality & Standards with Nextcloud
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, dom, filter, gd, json, pdo, zip, curl, mysql
          tools: composer:v2
          
      - name: Get composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
        
      - name: Cache composer dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-
            
      - name: Install dependencies
        run: |
          # Update dependencies to ensure lock file is current
          composer update --no-interaction --prefer-dist
          
          # Verify tools are available
          if [ ! -f "./vendor/bin/php-cs-fixer" ]; then
            echo "php-cs-fixer not found, installing..."
            composer require --dev friendsofphp/php-cs-fixer:^3.0 --no-interaction
          fi
          
          if [ ! -f "./vendor/bin/psalm" ]; then
            echo "psalm not found, installing..."
            composer require --dev vimeo/psalm:^5.0 --no-interaction
          fi
        
      - name: Run PHP linting
        run: composer lint
        continue-on-error: true
        
      - name: Run PHP CodeSniffer
        run: composer cs:check
        continue-on-error: true
        
      - name: Run Psalm static analysis
        run: composer psalm
        continue-on-error: true
        
      - name: Start MariaDB, Redis, Mail and Nextcloud with Docker
        run: |
          # Start MariaDB container (matching local setup)
          docker run -d \
            --name mariadb-test-quality \
            -e MYSQL_ROOT_PASSWORD=nextcloud \
            -e MYSQL_PASSWORD=nextcloud \
            -e MYSQL_USER=nextcloud \
            -e MYSQL_DATABASE=nextcloud \
            mariadb:10.6
          
          # Start Redis container (required by Nextcloud)
          docker run -d \
            --name redis-test-quality \
            redis:7
          
          # Start Mail container (MailHog for testing) - matching local setup
          docker run -d \
            --name mail-test-quality \
            -p 1026:1025 \
            -p 8026:8025 \
            ghcr.io/juliusknorr/nextcloud-dev-mailhog:latest
          
          # Wait for MariaDB to be ready
          echo "Waiting for MariaDB to start..."
          timeout 60 bash -c 'until docker exec mariadb-test-quality mysqladmin ping -h"localhost" --silent; do sleep 2; done'
          
          # Start Nextcloud container with all dependencies - matching local setup
          docker run -d \
            --name nextcloud-test-quality \
            --link mariadb-test-quality:db \
            --link redis-test-quality:redis \
            --link mail-test-quality:mail \
            -p 8081:80 \
            -e MYSQL_HOST=db \
            -e MYSQL_DATABASE=nextcloud \
            -e MYSQL_USER=nextcloud \
            -e MYSQL_PASSWORD=nextcloud \
            -e REDIS_HOST=redis \
            -e REDIS_PORT=6379 \
            -e MAIL_SMTP_HOST=mail \
            -e MAIL_SMTP_PORT=1025 \
            -e MAIL_SMTP_NAME=mail \
            -e MAIL_SMTP_PASSWORD= \
            -e MAIL_SMTP_SECURE= \
            -e MAIL_FROM_ADDRESS=nextcloud@localhost \
            -e MAIL_DOMAIN=localhost \
            -e NEXTCLOUD_ADMIN_USER=admin \
            -e NEXTCLOUD_ADMIN_PASSWORD=admin \
            -e NEXTCLOUD_TRUSTED_DOMAINS=localhost \
            -e WITH_REDIS=YES \
            ghcr.io/juliusknorr/nextcloud-dev-php81:latest
          
          # Wait for Nextcloud to be ready
          echo "Waiting for Nextcloud to start..."
          timeout 300 bash -c 'until curl -f http://localhost:8081/status.php; do sleep 5; done'
          
          # Create apps-extra directory in Nextcloud container
          echo "Creating apps-extra directory in Nextcloud container..."
          docker exec nextcloud-test-quality mkdir -p /var/www/html/apps-extra
          
          # Copy the OpenConnector app into the container
          echo "Copying OpenConnector app into Nextcloud container..."
          docker cp . nextcloud-test-quality:/var/www/html/apps-extra/openconnector
          
          # Check what's available in the container
          echo "=== Nextcloud Container Diagnostics ==="
          echo "Checking if occ command is available..."
          docker exec nextcloud-test-quality bash -c "which occ || echo 'occ not found'"
          echo "Checking if php occ works..."
          docker exec nextcloud-test-quality bash -c "php occ --version || echo 'php occ not working'"
          echo "Checking Nextcloud installation..."
          docker exec nextcloud-test-quality bash -c "ls -la /var/www/html/occ || echo 'occ file not found'"
          echo "Checking if Nextcloud is fully initialized..."
          docker exec nextcloud-test-quality bash -c "php -r 'echo \"PHP is working\n\";'"
          echo "=== End Diagnostics ==="
          
          # Install the OpenConnector app
          echo "Installing OpenConnector app..."
          docker exec nextcloud-test-quality bash -c "cd /var/www/html && php occ app:install openconnector" || echo "App installation failed, continuing..."
          
          # Enable the app
          echo "Enabling OpenConnector app..."
          docker exec nextcloud-test-quality bash -c "cd /var/www/html && php occ app:enable openconnector" || echo "App enabling failed, continuing..."
          
          # Set up test environment
          docker exec nextcloud-test-quality php occ config:system:set debug --value true
          docker exec nextcloud-test-quality php occ config:system:set loglevel --value 0
          
          # Check what's available in the container
          echo "=== Container Diagnostics ==="
          echo "Checking if composer is available..."
          docker exec nextcloud-test-quality bash -c "which composer || echo 'composer not found'"
          echo "Checking if php is available..."
          docker exec nextcloud-test-quality bash -c "which php || echo 'php not found'"
          echo "Checking if composer.phar exists..."
          docker exec nextcloud-test-quality bash -c "ls -la /var/www/html/composer.phar || echo 'composer.phar not found'"
          echo "Checking vendor directory..."
          docker exec nextcloud-test-quality bash -c "ls -la /var/www/html/vendor/ || echo 'vendor directory not found'"
          echo "=== End Diagnostics ==="
          
          # Try to install PHPUnit
          echo "Attempting to install PHPUnit..."
          docker exec nextcloud-test-quality bash -c "cd /var/www/html && composer require --dev phpunit/phpunit:^9.6" || echo "PHPUnit installation failed"
        
      - name: Run unit tests inside Nextcloud container
        run: |
          # Run tests from inside the Nextcloud container where all OCP classes are available
          echo "Running tests inside Nextcloud container..."
          docker exec nextcloud-test-quality bash -c "cd /var/www/html && ./vendor/bin/phpunit --bootstrap apps-extra/openconnector/tests/bootstrap.php apps-extra/openconnector/tests"
        
      - name: Generate quality status
        if: always()
        run: |
          echo "## 🔍 Code Quality & Standards" >> $GITHUB_STEP_SUMMARY
          if [ "${{ job.status }}" = "success" ]; then
            echo "- ✅ PHP Linting: Completed" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Code Style: Completed" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Static Analysis: Completed" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Unit Tests: Completed" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ All quality checks passed!" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ PHP Linting: Failed" >> $GITHUB_STEP_SUMMARY
            echo "- ❌ Code Style: Failed" >> $GITHUB_STEP_SUMMARY
            echo "- ❌ Static Analysis: Failed" >> $GITHUB_STEP_SUMMARY
            echo "- ❌ Unit Tests: Failed" >> $GITHUB_STEP_SUMMARY
            echo "- ❌ Some quality checks failed!" >> $GITHUB_STEP_SUMMARY
          fi
          
      - name: Cleanup containers
        if: always()
        run: |
          docker stop nextcloud-test-quality mariadb-test-quality redis-test-quality mail-test-quality || true
          docker rm nextcloud-test-quality mariadb-test-quality redis-test-quality mail-test-quality || true
