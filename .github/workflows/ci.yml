name: CI - Tests & Quality Checks

on:
  pull_request:
    branches: [development, main, master]
  push:
    branches: [development, main, master]

jobs:
  tests:
    name: PHP ${{ matrix.php-version }} Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        php-version: ['8.2', '8.3']
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, dom, filter, gd, json, pdo, zip, curl, mysql
          tools: composer:v2
          
      - name: Get composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
        
      - name: Cache composer dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-
            
      - name: Install dependencies
        run: |
          # Update dependencies to ensure lock file is current
          composer update --no-interaction --prefer-dist
          
          # Verify PHPUnit is available
          if [ ! -f "./vendor/bin/phpunit" ]; then
            echo "PHPUnit not found, installing directly..."
            composer require --dev phpunit/phpunit:^9.6 --no-interaction
          fi
          
          # Verify PHPUnit works
          ./vendor/bin/phpunit --version
        
      - name: Create test database
        run: |
          mkdir -p tests/data
          touch tests/data/test.db
          
      - name: Run PHP linting
        run: composer lint
        continue-on-error: true
        
      - name: Run unit tests
        run: composer test:unit
        
      - name: Upload coverage (PHP 8.2 only)
        if: matrix.php-version == '8.2'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  quality:
    name: Code Quality & Standards
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, dom, filter, gd, json, pdo, zip, curl, mysql
          tools: composer:v2
          
      - name: Get composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
        
      - name: Cache composer dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-
            
      - name: Install dependencies
        run: |
          # Update dependencies to ensure lock file is current
          composer update --no-interaction --prefer-dist
          
          # Verify tools are available
          if [ ! -f "./vendor/bin/php-cs-fixer" ]; then
            echo "php-cs-fixer not found, installing..."
            composer require --dev friendsofphp/php-cs-fixer:^3.0 --no-interaction
          fi
          
          if [ ! -f "./vendor/bin/psalm" ]; then
            echo "psalm not found, installing..."
            composer require --dev vimeo/psalm:^5.0 --no-interaction
          fi
        
      - name: Run PHP linting
        run: composer lint
        continue-on-error: true
        
      - name: Run PHP CodeSniffer
        run: composer cs:check
        continue-on-error: true
        
      - name: Run Psalm static analysis
        run: composer psalm
        continue-on-error: true
        
      - name: Run unit tests
        run: composer test:unit
        
      - name: Generate quality status
        if: always()
        run: |
          echo "## 🔍 Code Quality & Standards" >> $GITHUB_STEP_SUMMARY
          if [ "${{ job.status }}" = "success" ]; then
            echo "- ✅ PHP Linting: Completed" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Code Style: Completed" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Static Analysis: Completed" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Unit Tests: Completed" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ All quality checks passed!" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ PHP Linting: Failed" >> $GITHUB_STEP_SUMMARY
            echo "- ❌ Code Style: Failed" >> $GITHUB_STEP_SUMMARY
            echo "- ❌ Static Analysis: Failed" >> $GITHUB_STEP_SUMMARY
            echo "- ❌ Unit Tests: Failed" >> $GITHUB_STEP_SUMMARY
            echo "- ❌ Some quality checks failed!" >> $GITHUB_STEP_SUMMARY
          fi
