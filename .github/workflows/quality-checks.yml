name: Quality Checks

on:
  pull_request:
    branches:
      - development
      - main
      - master
  push:
    branches:
      - development
      - main
      - master

jobs:
  quality-checks:
    runs-on: ubuntu-latest
    name: Code Quality & Standards
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, dom, filter, gd, iconv, json, mbstring, pdo
          tools: composer:v2
          
      - name: Get composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT
        
      - name: Cache composer dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-
            
      - name: Install dependencies with PHPUnit
        run: |
          # Try to install from lock file first
          if ! composer install --prefer-dist --no-progress --no-interaction --optimize-autoloader; then
            echo "Lock file install failed, updating dependencies..."
            composer update --no-interaction
          fi
          
          # Verify PHPUnit is available
          if [ ! -f "./vendor/bin/phpunit" ]; then
            echo "PHPUnit not found, installing directly..."
            composer require --dev phpunit/phpunit:^9.6 --no-interaction
          fi
          
          # Verify PHPUnit works
          ./vendor/bin/phpunit --version
        
      - name: Create test database
        run: |
          mkdir -p tests/data
          touch tests/data/test.db
          
      - name: Run PHP linting
        run: composer lint
        
      - name: Run PHP CodeSniffer
        run: composer cs:check
        continue-on-error: true
        
      - name: Run Psalm static analysis
        run: composer psalm
        continue-on-error: true
        
      - name: Run unit tests
        run: composer test:unit
        
      - name: Generate quality status
        if: success()
        run: |
          echo "QUALITY_STATUS=passed" >> $GITHUB_ENV
          echo "Quality checks completed successfully!" > quality-status.txt
        
      - name: Comment PR with quality status
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let message = '## 🔍 OpenConnector Quality Check Results\n\n';
            
            if (process.env.QUALITY_STATUS === 'passed') {
              message += '✅ **All quality checks passed!**\n';
              message += '- PHP Syntax: ✅ No errors\n';
              message += '- Code Style: ✅ PHPCS checks passed\n';
              message += '- Static Analysis: ✅ Psalm checks passed\n';
              message += '- Unit Tests: ✅ Tests completed\n\n';
            } else {
              message += '⚠️ **Some quality checks failed**\n';
              message += 'Please check the workflow logs for details.\n\n';
            }
            
            message += '### Available Commands\n';
            message += '```bash\n';
            message += 'composer lint          # PHP syntax check\n';
            message += 'composer cs:check      # Code style check\n';
            message += 'composer psalm         # Static analysis\n';
            message += 'composer test:unit     # Unit tests\n';
            message += '```\n';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });
        
      - name: Test Results Summary
        if: always()
        run: |
          echo "## 🔍 OpenConnector Quality Checks" >> $GITHUB_STEP_SUMMARY
          if [ "${{ job.status }}" = "success" ]; then
            echo "- ✅ PHP Linting: Completed" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Code Style: Completed" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Static Analysis: Completed" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Unit Tests: Completed" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ All quality checks passed!" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ PHP Linting: Failed" >> $GITHUB_STEP_SUMMARY
            echo "- ❌ Code Style: Failed" >> $GITHUB_STEP_SUMMARY
            echo "- ❌ Static Analysis: Failed" >> $GITHUB_STEP_SUMMARY
            echo "- ❌ Unit Tests: Failed" >> $GITHUB_STEP_SUMMARY
            echo "- ❌ Some quality checks failed!" >> $GITHUB_STEP_SUMMARY
          fi
