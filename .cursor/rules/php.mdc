---
description: Rules for PHP files
globs: ["*.php"]
alwaysApply: false
---
# PHP Coding Standards

## General Rules
- All PHP files must start with the `<?php` tag followed by a blank line
- All PHP files must be in a namespace following the pattern `OCA\OpenConnector\{Category}\{Subcategory}`
- All PHP files must end with a single newline
- No trailing whitespace is allowed
- No short open tags are allowed

## Class and Interface Rules
- All classes and interfaces must have a complete docblock containing:
  - Description
  - Package
  - Category
  - Author
  - Copyright
  - License
  - Version
  - Link
  - Since

## Code Style
- Follow PSR-12 coding standards
- Multi-line control structures must have:
  - First expression on the line after the opening parenthesis
  - Closing parenthesis on the line after the last expression
  - Proper indentation for all lines

## Properties
- All properties must have type declarations
- Use readonly properties where appropriate
- All properties must have docblocks with type information

## Methods
- All methods must have:
  - Return type declarations
  - Parameter type declarations
  - Default values for optional parameters
  - Complete docblocks including:
    - Description
    - @param annotations with types and descriptions
    - @return annotation with type and description
    - @throws annotation for any exceptions
  - PHPStan and Psalm annotations where appropriate

## Testing
- All methods must have corresponding PHPUnit tests
- Test methods must follow the pattern `test{MethodName}{Scenario}`
- Test methods must have docblocks describing the test scenario

## Documentation
- All code changes must be documented in Docusaurus
- Documentation files must be in the website/docs folder
- Use single quotes (') instead of backticks (`) in documentation
- Technical documentation must include:
  - Class purpose and responsibility
  - Method descriptions and usage examples
  - Configuration options
  - Dependencies and requirements

## Quality Checks
- All code must pass:
  - PHP_CodeSniffer (PSR-12)
  - PHPStan (Level 8)
  - Psalm (Level 1)
  - PHPUnit tests

## Example Class Structure
```php
<?php

namespace OCA\OpenConnector\Service\Handler;

/**
 * Description of the class purpose.
 *
 * @package     OpenConnector
 * @category    Service
 * @author      Conduction B.V. <info@conduction.nl>
 * @copyright   Copyright (C) 2024 Conduction B.V. All rights reserved.
 * @license     EUPL 1.2
 * @version     1.0.0
 * @link        https://openregister.app
 *
 * @since       1.0.0 - Description of when this class was added
 */
class ExampleClass
{
    /**
     * Description of the property.
     *
     * @var string
     */
    private readonly string $property;

    /**
     * Constructor.
     *
     * @param string $property Description of the parameter
     */
    public function __construct(string $property)
    {
        $this->property = $property;
    }

    /**
     * Description of what the method does.
     *
     * @param string $param Description of the parameter
     * @param int    $optionalParam Description of the optional parameter
     *
     * @return bool Description of the return value
     *
     * @throws \Exception When something goes wrong
     *
     * @psalm-pure
     * @phpstan-return bool
     */
    public function exampleMethod(string $param, int $optionalParam = 0): bool
    {
        // Method implementation
        return true;
    }
}
```

## App Structure
- Backend (PHP):
  - All PHP code resides in the `lib/` directory
  - Directory structure follows PSR-4 autoloading:
    - `lib/Controller/` - Application controllers
    - `lib/Service/` - Business logic and services
    - `lib/Db/` - Database entities and mappers
    - `lib/Exception/` - Custom exceptions
    - `lib/Migration/` - Database migrations
    - `lib/Helper/` - Helper classes and utilities
    - `lib/Event/` - Event classes
    - `lib/EventListener/` - Event listeners
    - `lib/Command/` - Console commands
    - `lib/Cron/` - Cron jobs
    - `lib/Settings/` - Application settings
    - `lib/AppInfo/` - App information and registration
    - `lib/Http/` - HTTP related classes
    - `lib/Validator/` - Validation classes
    - `lib/Factory/` - Factory classes
    - `lib/Provider/` - Service providers
    - `lib/Twig/` - Twig extensions and runtime
    
## File Structure
- All PHP files should start with a docblock containing:
  - Class name
  - Category
  - Package
  - Author
  - Copyright
  - License
  - Version
  - Link to application

## Code Style (PHPCS Rules)
- Follow PEAR standard with specific customizations:
  - Line length: max 125 chars (soft limit), 150 chars (hard limit)
  - No Yoda conditions
  - Use short array syntax []
  - One argument per line in multi-line function calls
  - No inline control structures
  - No multiple statements on one line
  - Space after type casting
  - No underscore prefix for private methods/properties

### Spacing Rules
- Array bracket spacing (Squiz)
- Function declaration argument spacing (Squiz)
- Control structure spacing (Squiz)
- Function spacing: 1 line between functions
- Member var spacing (Squiz)
- Operator spacing (Squiz)
- No superfluous whitespace

### Commenting Rules
- Block comments properly aligned (Squiz)
- DocComment alignment (Squiz)
- Empty catch must have comment
- Proper inline comment formatting
- Long condition closing comments
- Variable comments required

### Forbidden Functions/Patterns
- sizeof (use count)
- delete (use unset)
- print (use echo)
- is_null
- create_function
- var_dump
- No inline if statements

### Array Formatting
- Custom array indentation rules
- No long array syntax
- Proper key/value alignment

## Method Requirements
- All methods, classes, and properties MUST have docblocks
- All methods MUST have:
  - Return type declarations
  - Parameter type hints
  - Default values for optional parameters
  - PHPStan and Psalm annotations
  - PHPUnit tests
  - Inline comments explaining each logical step
  - Docblocks containing:
    - @param annotations with types and descriptions
    - @return annotation with type and description
    - @throws annotations for all possible exceptions
    - @since annotation with version number
    - @deprecated annotation if applicable
- Properties MUST:
  - Have docblocks with type information
  - Use readonly modifier when the property should not be modified after construction
  - Include visibility modifier (public, protected, private)
  - Have proper type hints
- Classes MUST:
  - Have complete docblocks as per template
  - Follow single responsibility principle
  - Use proper inheritance and interfaces
  - Have descriptive names matching their purpose

## Documentation
- Use Docusaurus for documentation
- Technical and user documentation should be in website/docs folder
- All code changes must be documented
- Use single quotes (') instead of backticks (`) in documentation

## Testing
- Write PHPUnit tests for all methods
- Tests should be placed in tests/ directory
- Test names should be descriptive and follow the pattern test[MethodName]_[Scenario]

## Error Handling
- Use appropriate exception types
- Include meaningful error messages
- Log errors appropriately
- Handle edge cases

## Security
- Never expose sensitive data
- Use prepared statements for database queries
- Validate all input
- Sanitize all output
- Follow OWASP security guidelines

## Performance
- Optimize database queries
- Use caching where appropriate
- Minimize memory usage
- Consider scalability

## Dependencies
- Use Composer for dependency management
- Keep dependencies up to date
- Document all external dependencies
- Use specific version constraints 