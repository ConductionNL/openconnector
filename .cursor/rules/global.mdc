---
description: Global rules that apply to all files
---
# Global Coding Standards and Best Practices

## Documentation
- All documentation is maintained in website/docs using Docusaurus
- Documentation must be updated whenever functionality is added or modified
- Use Mermaid diagrams for visualizing:
  - Flow charts
  - Sequence diagrams
  - Class diagrams
  - Entity relationships
  - State diagrams
  - User journeys
  - Gantt charts

### Documentation Structure
- Technical documentation in website/docs/technical
- User documentation in website/docs/user
- API documentation in website/docs/api
- Architecture documentation in website/docs/architecture
- Deployment documentation in website/docs/deployment

### Documentation Requirements
- Every new feature must include:
  - Technical documentation explaining the implementation
  - User documentation if it affects user interaction
  - API documentation if it exposes endpoints
  - Updated architecture diagrams if it changes system structure
  - Mermaid diagrams for complex flows or relationships
- Every modified feature must update:
  - Existing documentation to reflect changes
  - Related diagrams and visualizations
  - Version history in the relevant docs

### Mermaid Diagram Guidelines
- Use Mermaid for all technical diagrams
- Keep diagrams simple and focused
- Include diagram source in markdown for future updates
- Use consistent styling across diagrams
- Add descriptive titles and legends
- Document diagram conventions in website/docs/contributing

### Documentation Style
- Write in clear, concise language
- Use proper markdown formatting
- Include code examples where relevant
- Use single quotes (') instead of backticks (`) for inline code
- Keep documentation up to date with code changes
- Include version information when relevant

## Version Control
- Use meaningful commit messages
- Reference issue numbers in commits
- Keep commits focused and atomic
- Update documentation in same commit as code changes

## Code Quality
- Write self-documenting code
- Include comments for complex logic
- Follow language-specific best practices
- Maintain consistent code style
- Write testable code

## Testing
- Write tests for new functionality
- Update tests when modifying existing code
- Maintain high test coverage
- Document test scenarios

## Security
- Follow security best practices
- Document security considerations
- Keep dependencies up to date
- Review security implications of changes

## Performance
- Consider performance implications
- Document performance considerations
- Include performance metrics where relevant

## Accessibility
- Follow accessibility guidelines
- Document accessibility features
- Test with accessibility tools

## Internationalization
- Support multiple languages
- Document translation requirements
- Use proper i18n practices

## Project Structure
- Follow consistent directory structure
- Organize files logically
- Use appropriate file extensions
- Keep related files together
- Maintain clear separation of concerns

## Development Workflow
- Use development, staging, and production environments
- Implement continuous integration
- Use automated testing
- Regular dependency updates
- Security scanning
- Performance monitoring

## Accessibility
- Follow WCAG guidelines
- Test with screen readers
- Ensure keyboard navigation
- Maintain proper contrast ratios
- Provide alternative text for images

## Internationalization
- Use translation files
- Handle different date formats
- Consider RTL languages
- Use appropriate character encoding

## Security
- Regular security audits
- Keep dependencies updated
- Implement proper access controls
- Regular penetration testing

## Performance
- Optimize load times
- Implement caching
- Minimize resource usage
- Regular performance testing
- Monitor metrics

## Maintenance
- Regular code cleanup
- Remove unused code
- Update outdated dependencies
- Monitor error logs
- Regular backups 